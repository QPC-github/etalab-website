name: ci
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-node@v3
      with:
        node-version: '18'
    - uses: bahmutov/npm-install@v1
    - run: yarn build
    - uses: actions/upload-artifact@v2
      with:
        name: build
        path: build

  check_if_version_upgraded:
    name: Check if version upgrade
    # When someone forks the repo and opens a PR we want to enables the tests to be run (the previous jobs)
    # but obviously only us should be allowed to release.
    # In the following check we make sure that we own the branch this CI workflow is running on before continuing.
    # Without this check, trying to release would fail anyway because only us have the correct secret.NPM_TOKEN but
    # it's cleaner to stop the execution instead of letting the CI crash.
    if: |
      github.event_name == 'push' || 
      github.event.pull_request.head.repo.owner.login == github.event.pull_request.base.repo.owner.login 
    runs-on: ubuntu-latest
    needs: build
    outputs:
      from_version: ${{ steps.step1.outputs.from_version }}
      to_version: ${{ steps.step1.outputs.to_version }}
      is_upgraded_version: ${{ steps.step1.outputs.is_upgraded_version }}
      is_pre_release: ${{steps.step1.outputs.is_pre_release }}
    steps:
    - uses: garronej/ts-ci@v2.1.0
      id: step1
      with: 
        action_name: is_package_json_version_upgraded
        branch: ${{ github.head_ref || github.ref }}

  docker:
    needs: 
      - check_if_version_upgraded
      - build
    runs-on: ubuntu-latest
    # We publish the the docker image only if it's a push on the default branch or if it's a PR from a 
    # branch (meaning not a PR from a fork). It would be more straightforward to test if secrets.DOCKERHUB_TOKEN is 
    # defined but GitHub Action don't allow it.
    if: |
      github.event_name == 'push' || 
      github.event.pull_request.head.repo.owner.login == github.event.pull_request.base.repo.owner.login 
    steps:
       - run: echo "Uncomment once we have the etalab dockerhub token"
       - uses: actions/checkout@v2
       - uses: docker/setup-qemu-action@v1
       - uses: docker/setup-buildx-action@v1
       - uses: docker/login-action@v1
         with:
           username: ${{ secrets.DOCKERHUB_USERNAME }}
           password: ${{ secrets.DOCKERHUB_TOKEN }}
       - name: Computing Docker image tags
         id: step1
         env: 
           IS_UPGRADED_VERSION: ${{ needs.check_if_version_upgraded.outputs.is_upgraded_version }}
           TO_VERSION: ${{ needs.check_if_version_upgraded.outputs.to_version }}
         run: |
           OUT=$GITHUB_REPOSITORY:$(
           [ "$GITHUB_EVENT_NAME" == "pull_request" ] &&
             echo "$GITHUB_HEAD_REF" ||
             echo "${GITHUB_REF#refs/*/}"
           )
           if [ "$IS_UPGRADED_VERSION" = "true" ]; then
             OUT=$OUT,$GITHUB_REPOSITORY:$TO_VERSION,$GITHUB_REPOSITORY:latest
           fi
           OUT=$(echo "$OUT" | awk '{print tolower($0)}') 
           echo ::set-output name=docker_tags::$OUT
       - uses: docker/build-push-action@v2
         with:
           push: true
           context: .
           tags: ${{ steps.step1.outputs.docker_tags }}

  create_github_release:
    runs-on: ubuntu-latest
    # We create release only if the version in the package.json have been upgraded and this CI is running against the main branch.
    # We allow branches with a PR open on main to publish pre-release (x.y.z-rc.u) but not actual releases.
    if: |
      needs.check_if_version_upgraded.outputs.is_upgraded_version == 'true' &&
      (
        github.event_name == 'push' ||
        needs.check_if_version_upgraded.outputs.is_pre_release == 'true'
      )
    needs: 
      - check_if_version_upgraded
    steps:
    - uses: softprops/action-gh-release@v1
      with:
        name: Release v${{ needs.check_if_version_upgraded.outputs.to_version }}
        tag_name: v${{ needs.check_if_version_upgraded.outputs.to_version }}
        target_commitish: ${{ github.head_ref || github.ref }}
        generate_release_notes: true
        draft: false
        prerelease: ${{ needs.check_if_version_upgraded.outputs.is_pre_release == 'true' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  poke_gitops:
    runs-on: ubuntu-latest
    needs: 
      - docker
      - create_github_release
    steps:
    - uses: peter-evans/repository-dispatch@v1
      with:
        token: ${{ secrets.PAT_PRIVATE_REPO_DISPATCH }}
        event-type: update_etalab_website
        repository: etalab/paris-sspcloud